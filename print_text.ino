#define NUM_CHARPIXELS 5
#define NUM_LINES 32

void printText(char *text) {
    char b[NUMPIXELS] = {};
    showText(b);
    int k = 0;
    for (int i = 0; i < 5; ++i) {
        k ++;
        char mat[NUM_CHARPIXELS];
        char_to_mat(text[i], mat);
        for (int j = 0; j < 5; ++j) {
            b[k++] = mat[j];
        }
    }
    showText(b);
    delay(DELAY_VAL * 3);
}

void char_to_mat(char c, char *mat) {
    const char lib[26][NUM_CHARPIXELS] = {
        {
            0b11111110,
            0b10010000,
            0b00001001,
            0b10010000,
            0b11111110
        },
        {
            0b11111111,
            0b10010001,
            0b10001001,
            0b10010001,
            0b01110110
        }, {
            0b01111110,
            0b10000001,
            0b10000001,
            0b10000001,
            0b01000010
        }, {
            0b11111111,
            0b10000001,
            0b10000001,
            0b10000010,
            0b00111110
        }, {
            0b11111111,
            0b10010001,
            0b10001001,
            0b10010001,
            0b10001001
        }, {
            0b11111111,
                0b10010000,
                0b00001001,
                0b10010000,
                0b00001001
        }, {
            0b01111110,
                0b10000001,
                0b10000001,
                0b10001001,
                0b01110010
        }, {
            0b11111111,
                0b00001000,
                0b00010000,
                0b00001000,
                0b11111111
        }, {
            0b10000001,
                0b10000001,
                0b11111111,
                0b10000001,
                0b10000001
        }, {
            0b01000000,
                0b10000001,
                0b10000001,
                0b11111110,
                0b00000001
        }, {
            0b11111111,
                0b00011000,
                0b00100100,
                0b01000010,
                0b10000001
        }, {
            0b11111111,
                0b00000001,
                0b10000000,
                0b00000001,
                0b10000000
        }, {
            0b11111111,
                0b01000000,
                0b00001100,
                0b01000000,
                0b11111111
        }, {
            0b11111111,
                0b01100000,
                0b00011000,
                0b00000110,
                0b11111111
        }, {
            0b01111110,
                0b10000001,
                0b10000001,
                0b10000001,
                0b01111110
        }, {
            0b11111111,
                0b10010000,
                0b00001001,
                0b10010000,
                0b00000110
        }, {
            0b01111110,
                0b10000101,
                0b10100001,
                0b01111110,
                0b10000000
        }, {
            0b11111111,
                0b10011000,
                0b00101001,
                0b10010011,
                0b10000110
        }, {
            0b01000110,
                0b10010001,
                0b10011001,
                0b10001001,
                0b01100010
        }, {
            0b00000001,
                0b10000000,
                0b11111111,
                0b10000000,
                0b00000001
        }, {
            0b01111111,
                0b00000001,
                0b10000000,
                0b00000001,
                0b01111111
        }, {
            0b00001111,
                0b00001110,
                0b10000000,
                0b00001110,
                0b00001111
        }, {
            0b01111111,
                0b00000001,
                0b11111110,
                0b00000001,
                0b01111111
        }, {
            0b11000011,
                0b00100100,
                0b00011000,
                0b00100100,
                0b11000011
        }, {
            0b00000011,
                0b00100000,
                0b11111000,
                0b00100000,
                0b00000011
        }, {
            0b10000001,
                0b10000111,
                0b10011001,
                0b11100001,
                0b10000001
        }
    };

    memcpy(mat, lib[(int)c - 65], sizeof(char) * NUM_CHARPIXELS);
}

void showText(char *b) {
    uint32_t off = pixels.Color(0, 0, 0);
    uint32_t on = pixels.Color(255, 255, 255);
    for (int i = 0; i < NUM_LINES; ++i) {
        for (int j = 0; j < 8; j++) {
            pixels.setPixelColor(i * 8 + j, (b[i] >> (7 - j)) & 1 ? on : off);
        }
    }
    pixels.show();
}
